#include "pins.h"
#include <arduino.h>
#include <Update.h>
#include <FS.h>
#include <SD.h>

//wefwefwefwefwef rgergeg

/* 
 Name:      SD_Update.ino
 Created:   12.09.2017 15:07:17
 Author:    Frederik Merz <frederik.merz@novalight.de>
 Purpose:   Update firmware from SD card

 Steps:
   1. Flash this image to the ESP32 an run it
   2. Copy update.bin to a SD-Card. you can basically
      compile this or any other example
      then copy and rename the app binary to the sd card root
   3. Connect SD-Card as shown in SD_MMC example. 
      this can also be adapted for SPI
   3. After successful update and reboot. ESP32 shall start the new app
*/

// perform the actual update from a given stream
void performUpdate(Stream &updateSource, size_t updateSize) {
   if (Update.begin(updateSize)) {      
      size_t written = Update.writeStream(updateSource);
      if (written == updateSize) {
         Serial.println("Written : " + String(written) + " successfully");
      }
      else {
         Serial.println("Written only : " + String(written) + "/" + String(updateSize) + ". Retry!");
      }
      if (Update.end()) {
         Serial.println("Update from SD done!");
         if (Update.isFinished()) {
            const char *ss = "Update successfully completed. Reboot to work with new app.";
            Serial.println (ss);
         }
         else {
            const char *ss = "Update not finished? Something went wrong!";
            Serial.println (ss);
          }
      }
      else {
         String ss = "Error Occurred. Error #: " + String (Update.getError ());
         Serial.println (ss);
      }
   }
   else {
        const char *ss = "Not enough space to begin update";
        Serial.println (ss);
   }
}

// check given FS for valid update.bin and perform update if available
void updateFromFS(fs::FS &fs1) {
   File updateBin = fs1.open("/update.bin");
   if (updateBin) {
      if(updateBin.isDirectory()){
         Serial.println("Error, update.bin is not a file");
         updateBin.close();
         return;
      }

      size_t updateSize = updateBin.size();

      if (updateSize > 0) {
         Serial.println("Try to start update");
         performUpdate(updateBin, updateSize);
      }
      else {
         Serial.println("Error, file is empty");
      }

      updateBin.close();
    
      // we finished; remove the binary from sd card to indicate end of the process
      //fs1.remove("/update.bin");
            
            unsigned long startMillis = millis ();
            while (millis () - startMillis < 3000) {
                if ((millis () - startMillis < 700) && (millis () % 500 < 350))
                    digitalWrite (BUZZER_PIN, 1);
                else
                    digitalWrite (BUZZER_PIN, 0);
                if (true) {
                    int brt = eepromData.dayBrightness;
                    int dutyCycle = (sin ((millis() - startMillis)/1000.0 * 4 * PI + 3*PI/2) + 1) * brt/2;
                    if (dutyCycle > brt) dutyCycle = brt;
                    if (dutyCycle < 0) dutyCycle = 0;
                    ledcWrite (ledChannel, dutyCycle);
                    //logln (String (millis ()) + ": brt: " + brt + "; dutyCycle: " + dutyCycle);
                }
            }
   }
   else {
      Serial.println("Could not load update.bin from sd root");
   }
}

void fn (size_t percent, size_t a100) {
    static int savedPercent = -1;

    if (savedPercent != percent) {
        savedPercent = percent;
        
        StaticJsonBuffer <JsonBufferCapacity> jb;
        JsonObject& root = jb.createObject();
    
        int prc = (percent*100)/a100;
        if (prc > 98) prc = 100;
        
        root["PERCENT"] = prc;
        char output[JsonBufferCapacity];
        root.printTo (output); 
        SerialBT.print (output); 

        if (prc%2)
            ledcWrite (ledChannel,   0);
        else
            ledcWrite (ledChannel, 255);
    }
}

void setupSD (void) {
   //pinMode (SD_DETECT_PIN, INPUT);
   uint8_t cardType;

   //first init and check SD card
   if (!SD.begin()) {
      logln("SD Card mount failed.");
   } else {
      logln("SD Card mounted successfully.");
   }

   cardType = SD.cardType();

   if (cardType == CARD_NONE) {
      logln("No SD card attached.");
   } else {
      Update.onProgress (fn);
      updateFromFS(SD);
      //Serial.println("Update OK!");
  }
}

void rebootEspWithReason(String reason){
    Serial.println(reason);
    delay(4000);
    ESP.restart();
}
